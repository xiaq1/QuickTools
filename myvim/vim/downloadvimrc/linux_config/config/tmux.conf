# reference -> https://github.com/square/maximum-awesome
# brew install reattach-to-user-namespace
# 有需要可以配 https://github.com/erikw/tmux-powerline
# C-a + ? 显示所有绑定

#1. 整理一份快捷键列表，查看当前被修改的键
#2. 配置自己喜欢的键
#3. 熟练应用
#4. 脚本化，更高级的东西  例如一个脚本布局好，并ssh http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2/
#5. 调整大小，切换样式

# 一个session - 多个窗口
# 一个窗口 - 多个pane
# 完全可以在不同的terminal切换打开

# 基本命令
# : 进入 tmux命令行模式
# ? 显示快捷键帮助 , q退出

##### session 操作
# d deattch当前session
# c-z 挂起, fg可以恢复
# tmux attach [-t sessionname] 恢复  alias to tma
# $ 重命名
# tmux ls 显示tmux的所有session

##### window 操作
# c 创建一个新的window
# & 关闭当前window
# , 重命名当前window
# p 前一个window
# n 后一个window
# l 切换到上次使用的window  【被改写，换成vim方式】
# NO  切换到指定数字的窗口
# w 显示当前会话的窗口，可以通过上下左右选择
# tmux neww -n win_name 新建一个窗口
# f 搜索所有窗口

####@ pane 操作
# " 横向切分   s [改写成Vim的分屏方式]
# % 纵向   v [Vim]
# 方向键   移动   hjkl[改写成vim移动方式]
# o 切换到下一个
# alter + 方向键  调整pane大小
# q 显示pane编号
# x 关闭当前pane，会有提示，可以直接ctrl-d
# { 当前移到左边
# } 当前移到右边
# z 当前pane最大化/恢复  【很有用】
# space 切换到下一部剧    【当前不可用】

#--------------------------- base config begin -------------------------------
# 全局设置
setw -g xterm-keys on
set-option -g base-index 1                        #窗口的初始序号；默认为0，这里设置为1
set-option -g history-limit 100000
set-option -g display-time 5000                   #提示信息的持续时间；设置足够的时间以避免看不清提示，单位为毫秒
set-option -g repeat-time 1000                    #控制台激活后的持续时间；设置合适的时间以避免每次操作都要先激活控制台，单位为毫秒
set-option -g default-terminal "screen-256color"
set-window-option display-panes-time 1500
# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# 进入控制台模式  c-a 换成什么好？
# use C-a, since it's on the home row and easier to hit than C-b
set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix
#set -g base-index 1

# mouse behavior
setw -g mode-mouse on
set -g mouse-select-pane on
set -g mouse-resize-pane on

bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# vi is good  vi风格
setw -g mode-keys vi
# --------  DONE!
# use vim-like keys for splits and windows
# S: v / s 竖直、水平分割window为pane
unbind '"'
unbind %
## split windows like vim.  - Note: vim's definition of a horizontal/vertical split is reversed from tmux's
bind-key v split-window -h
bind-key s split-window -v
# S: hjkl pane之间移动
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# ???? what for
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+


# what for
# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
bind C-l send-keys 'C-l'

bind-key C-o rotate-window

bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80


#---------- copy/paste -----
# [ 进入复制，space键开始选择问题  方向键移动，  回车复制  ] 黏贴
bind-key [ copy-mode
bind-key ] paste-buffer
# Copy and paste like in vim  - TODO: p 换成paste
# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"


bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window


# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

# Status Bar
set-option -g status-interval 1
set-option -g status-left ''
set-option -g status-right '%l:%M%p'
set-window-option -g window-status-current-fg magenta
set-option -g status-fg default

# Status Bar solarized-dark (default)
set-option -g status-bg black
set-option -g pane-active-border-fg black
set-option -g pane-border-fg black

# Status Bar solarized-light
if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g status-bg white"
if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-active-border-fg white"
if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-border-fg white"

# pane border colors
set -g pane-active-border-fg '#55ff55'
set -g pane-border-fg '#555555'

# for osx

# Enable native Mac OS X copy/paste  对于mac用户，可以复制到系统剪贴板
set-option -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"

#--------------------------- base config end -------------------------------

